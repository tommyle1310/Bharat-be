import dotenv from 'dotenv';
import path from 'path';

// Lấy NODE_ENV, mặc định là 'development'
const env = process.env.NODE_ENV || 'development';

// Prefer .env.runtime if present (generated by indus-deploy.sh),
// otherwise try .env.{env}, and finally .env
const runtimeEnvFile = path.resolve(__dirname, '../.env.runtime');
const envFile = path.resolve(__dirname, `../.env.${env}`);
const fallbackEnvFile = path.resolve(__dirname, '../.env');

// Load environment variables
let loaded = false;
if (require('fs').existsSync(runtimeEnvFile)) {
  dotenv.config({ path: runtimeEnvFile });
  console.log('Loaded environment from .env.runtime');
  loaded = true;
}
if (!loaded && require('fs').existsSync(envFile)) {
  dotenv.config({ path: envFile });
  console.log(`Loaded environment from .env.${env}`);
  loaded = true;
}
if (!loaded && require('fs').existsSync(fallbackEnvFile)) {
  dotenv.config({ path: fallbackEnvFile });
  console.log('Loaded environment from .env');
  loaded = true;
}
if (!loaded) {
  console.log('No env file found, using system environment variables');
}

console.log('check env config', process.env.REDIS_HOST, process.env.REDIS_PORT, process.env.DB_HOST, process.env.DB_USER, process.env.DB_PASSWORD, process.env.DB_NAME, process.env.DB_CONN_LIMIT);

// Resolve data-files path robustly for local/Docker
const isDocker = process.env.DOCKER_CONTAINER === 'true' || require('fs').existsSync('/.dockerenv');
const fs = require('fs');

// Priority:
// 1) LOCAL_DATA_FILES_PATH (explicit local override for host runs)
// 2) Docker-mounted /app/data-files (when in container)
// 3) DATA_FILES_PATH (from env) if it exists on filesystem
// 4) DIR_BASE if it exists
// 5) fallback ../../data-files
function pickExistingPath(candidates: Array<string | undefined>, fallback: string): string {
  for (const p of candidates) {
    if (p && fs.existsSync(p)) return p;
  }
  return fallback;
}

let dataFilesPath = '';

// Explicit local override
const localOverride = process.env.LOCAL_DATA_FILES_PATH;
if (!isDocker && localOverride && fs.existsSync(localOverride)) {
  dataFilesPath = localOverride;
} else if (isDocker && fs.existsSync('/app/data-files')) {
  // Docker mount
  dataFilesPath = '/app/data-files';
  console.log('Docker detected: Using mounted data-files path /app/data-files');
} else {
  // Choose the first existing among provided envs or fallback
  dataFilesPath = pickExistingPath(
    [process.env.DATA_FILES_PATH, process.env.DIR_BASE],
    path.join(__dirname, '../../data-files')
  );
}

// Log static file paths
const staticConfig = {
  publicPath: path.join(__dirname, '../public'),
  dataFilesPath: dataFilesPath,
  publicUrl: process.env.PUBLIC_URL || '/public',
  dataFilesUrl: process.env.DATA_FILES_URL || '/data-files',
};

console.log('Static files config:', staticConfig);
console.log('DATA_FILES_PATH env:', process.env.DATA_FILES_PATH);
console.log('DIR_BASE env:', process.env.DIR_BASE);
console.log('isDocker:', isDocker);
console.log('Final dataFilesPath:', dataFilesPath);
export const config = {
  env: process.env.NODE_ENV || 'development',
  host: process.env.HOST || '0.0.0.0',
  port: Number(process.env.PORT || 1310),

  // CORS: explicitly allowlist origins (wildcard is invalid with credentials)
  corsOrigin: (process.env.CORS_ORIGIN || 'http://localhost:3000,http://13.203.1.159:1311')
    .split(',')
    .map(s => s.trim())
    .filter(Boolean),

  db: {
    host: process.env.DB_HOST || '127.0.0.1',
    port: Number(process.env.DB_PORT || 3306),
    user: process.env.DB_USER || 'kmsguser',
    password: process.env.DB_PASSWORD || 'kmsgpass',
    database: process.env.DB_NAME || 'kmsgdb',
    connectionLimit: Number(process.env.DB_CONN_LIMIT || 10),
  },

  redis: {
    host: process.env.REDIS_HOST || '127.0.0.1',
    port: Number(process.env.REDIS_PORT || 6379),
    username: process.env.REDIS_USERNAME,
    password: process.env.REDIS_PASSWORD,
    db: Number(process.env.REDIS_DB || 0),
    tls: process.env.REDIS_TLS === 'true' && process.env.REDIS_HOST !== '127.0.0.1'
    ? {}
    : undefined
  
  },

  // Static files configuration
  static: {
    // Local public directory (for backend-specific static files)
    publicPath: path.join(__dirname, '../public'),
    // External data-files directory (sibling to backend)
    dataFilesPath: staticConfig.dataFilesPath,
    // Public URL paths
    publicUrl: process.env.PUBLIC_URL || '/public',
    dataFilesUrl: process.env.DATA_FILES_URL || '/data-files',
  },
} as const;

export type AppConfig = typeof config;
